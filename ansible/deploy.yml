---
- name: Deploy Frontend Application to {{ env_name }} Environment
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    node_version: "20.x"
    project_dir: "{{ project_dir | default(lookup('env','GITHUB_WORKSPACE')) }}"
    git_branch: >-
      {% if env_name == 'Development' %}
        main
      {% elif env_name == 'Testing' %}
        feature/deployment
      {% else %}
        main
      {% endif %}
    health_check_urls: >-
      {% if env_name == 'Testing' %}
        [ "https://dev.frontend.test.daas.datacentrix.cloud/" ]
      {% elif env_name == 'Development' %}
        [ "https://dcx.dev.datacentrix.cloud" ]
      {% else %}
        [ "https://dcx.dev.datacentrix.cloud" ]
      {% endif %}

  tasks:
    - block:
        - name: Kill any stale apt/dpkg processes
          become: yes
          shell: |
            for pid in $(ps -eo pid,comm | awk '$2 ~ /apt|dpkg/ {print $1}'); do
              if [ "$pid" != "$$" ]; then
                kill -9 "$pid" || true
              fi
            done
          ignore_errors: yes

        - name: Set Git remote to HTTPS using token
          shell: |
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/datacentrix-software/dcx-cloud-frontend.git"
          args:
            chdir: "{{ project_dir }}"
          environment:
            GITHUB_TOKEN: "{{ github_token }}"

        - name: Pull latest code from correct branch
          shell: |
            git fetch --all
            git checkout "{{ git_branch | trim }}" \
              || git checkout -b "{{ git_branch | trim }}" origin/"{{ git_branch | trim }}"
            git reset --hard origin/"{{ git_branch | trim }}"
            git clean -fd
          args:
            chdir: "{{ project_dir }}"
          environment:
            GIT_ASKPASS: "/bin/echo"
            GIT_TERMINAL_PROMPT: "0"
            GITHUB_TOKEN: "{{ github_token }}"

        - name: Ensure curl, ca-certificates, gnupg present
          become: true
          apt:
            name: [ curl, ca-certificates, gnupg ]
            state: present
            update_cache: yes

        - name: Add NodeSource repo (Node {{ node_version }})
          become: true
          shell: curl -fsSL https://deb.nodesource.com/setup_{{ node_version }} | bash -
          args:
            executable: /bin/bash
            creates: /etc/apt/sources.list.d/nodesource.list   # idempotent

        - name: Install Node.js {{ node_version }}
          become: true
          apt:
            name: nodejs          # npm comes with NodeSource’s nodejs pkg
            state: latest
            update_cache: yes

        - name: Verify Node.js version ≥ 20
          command: node -v
          register: nodever
          changed_when: false

        - name: Abort if Node < 20
          fail:
            msg: "Node.js {{ nodever.stdout }} is < 20 — aborting."
          when: nodever.stdout is version('20.0.0', '<')

        - name: Display installed Node.js / npm versions
          debug:
            msg:
              - "Node: {{ nodever.stdout }}"
              - "npm : {{ lookup('pipe', 'npm -v') | trim }}"

        - name: Install dependencies
          shell: |
            npm install
            npm install zustand
          args:
            chdir: "{{ project_dir }}/src"

        - name: Build frontend application
          shell: npm run build
          args:
            chdir: "{{ project_dir }}/src"

        - name: Create timestamped GitHub tag
          uri:
            url: "https://api.github.com/repos/datacentrix-software/dcx-cloud-frontend/git/refs"
            method: POST
            headers:
              Authorization: "Bearer {{ github_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              ref: "refs/tags/successful-deploy-{{ env_name }}-{{ ansible_date_time.iso8601_basic_short }}"
              sha: "{{ github_sha }}"
          register: tag_push
          failed_when: tag_push.status not in [201, 422]

        - name: Delete old rollback tag if exists
          uri:
            url: "https://api.github.com/repos/datacentrix-software/dcx-cloud-frontend/git/refs/tags/successful-deploy-{{ env_name }}"
            method: DELETE
            headers:
              Authorization: "Bearer {{ github_token }}"
            status_code: [204, 404]
          ignore_errors: true

        - name: Recreate rollback tag
          uri:
            url: "https://api.github.com/repos/datacentrix-software/dcx-cloud-frontend/git/refs"
            method: POST
            headers:
              Authorization: "Bearer {{ github_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              ref: "refs/tags/successful-deploy-{{ env_name }}"
              sha: "{{ github_sha }}"
          register: create_rollback_tag
          failed_when: create_rollback_tag.status not in [201, 422]

        - name: Stop frontend service
          become: yes
          systemd:
            name: frontend
            state: stopped
            enabled: yes

        - name: Start frontend service
          become: yes
          systemd:
            name: frontend
            state: started
            enabled: yes

        - name: Perform health check on each endpoint
          uri:
            url: "{{ item }}"
            method: GET
            status_code: 200
            timeout: 30
            validate_certs: false
          register: hc
          retries: 5
          delay: 10
          until: hc.status == 200
          loop: "{{ health_check_urls }}"

        - name: Upload ZAP reports to /tmp
          copy:
            src: "{{ item.src }}"
            dest: "/tmp/{{ item.dest }}-{{ env_name }}{{ item.ext }}"
          loop:
            - { src: "{{ project_dir }}/src/zap/zap_full_scan_report.html", dest: zap-report, ext: ".html" }
            - { src: "{{ project_dir }}/src/zap/zap_full_scan_report.json", dest: zap-report, ext: ".json" }
          ignore_errors: yes

        - name: Notify Slack (success)
          when: env_name != 'Testing'
          uri:
            url: "{{ slack_webhook_url }}"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              text: |
                *Frontend deployed to `{{ env_name }}`*  
                • Branch: `{{ git_branch }}`  
                • SHA: `{{ github_sha }}`  
                • Health check: Passed

      rescue:
        - name: Reset to rollback tag
          shell: |
            git fetch --tags
            git reset --hard successful-deploy-{{ env_name }}
            git clean -fd
          args:
            chdir: "{{ project_dir }}"

        - name: Restart frontend service after rollback
          become: yes
          systemd:
            name: frontend
            state: restarted

        - name: Health check after rollback
          uri:
            url: "{{ health_check_url }}"
            method: GET
            status_code: 200
            timeout: 30
            validate_certs: false
          register: rollback_health
          retries: 5
          delay: 10
          until: rollback_health.status == 200

        - name: Notify Slack (rollback)
          when: env_name != 'Testing'
          uri:
            url: "{{ slack_webhook_url }}"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              text: |
                *Deployment failed on `{{ env_name }}`*  
                • Rolled back using tag  
                • Health after rollback: {{ 'Passed' if rollback_health.status == 200 else 'Failing' }}  
                • Triggered by: `{{ triggered_by | default('Unknown') }}`
